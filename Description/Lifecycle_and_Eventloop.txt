Node.js Lifecycle and Event Loop
Node.js is built on Google's V8 JavaScript engine and follows an event-driven, non-blocking I/O model. Understanding the lifecycle and the event loop is crucial to working effectively with Node.js.

1. Node.JS Lifecycle
1.1 Application initialization
When you execute a Node.js application, it performs the following:
=> Parses and executes the JS file.
=> Initializes the required modules and libraries.
=> Sets up the event loop.
1.2 Event Registration
=> The application registers asynchronous tasks such as:
File I/O operations.
HTTP requests.
Timers (e.g., setTimeout or  setInterval).
1.3 Event loop execution
The Node.js event loop continuously checks for completed tasks and executes their associated callbacks.
1.4 Application exit 
Node.js exits when:
No more tasks are scheduled in the event loop
The process.exit() function is explicitly called.

2. The Event loop
The event loop is the mechanism that handles asynchronous operations in Node.js. It ensures non-blocking behavior by delegating work to system resources and processing their results asynchronously.
2.1 Phases of the Event Loop
The event loop operates in phases. Each phase handles a specific category of operations:
1. Timers:
Executes callbacks scheduled by setTimeout and setInterval.

2. Pending Callbacks:
Executes I/O callbacks deferred from the previous loop iteration.

3. Idle, Prepare:
Internal operations used by Node.js (rarely relevant for developers).

4. Poll:
Retrieves new I/O events.
Executes their callbacks if available.
Handles blocking operations if necessary.

5. Check:
Executes setImmediate callbacks.

6. Close Callbacks:
Executes close event callbacks (e.g., socket.on('close', ...)).

2.2 How It Works
The event loop begins executing as soon as the application starts.
It continuously cycles through the phases.
If a phase has pending tasks, their callbacks are executed.
If no tasks are scheduled, the event loop waits for new events.

3. Event loop Priority
Understanding the Priority of operations is key to predicting their behavior:
1. MicroTask(Hight Priority): 

Examples: Promise.then, process.nextTick.
These are executed between the phases of the event loop.

2. Macrotasks (Lower Priority):

Examples: setTimeout, setImmediate.
These are executed in their respective phases.

setTimeout(() => console.log('setTimeout'), 0);
setImmediate(() => console.log('setImmediate'));
process.nextTick(() => console.log('process.nextTick'));
Promise.resolve().then(() => console.log('Promise'));

o/p
process.nextTick
Promise
setTimeout / setImmediate (order depends on execution environment)

4. Key Characteristics
Non-blocking I/O:

Node.js delegates I/O tasks to the system and processes their results asynchronously.
Single-threaded:

The event loop runs in a single thread but can handle many concurrent tasks.
Concurrency via Libuv:

Node.js uses the Libuv library for thread management and async I/O.

5. Visual Representation of the Event Loop
Node.js Application Start

app.js execution begins.
Asynchronous tasks are offloaded.
Event Loop Phases:

┌───────────────────────────┐
│           Timer           │
├───────────┬───────────────┤
│   Pending Callbacks       │
├───────────┬───────────────┤
│    Poll (I/O Operations)  │
├───────────┬───────────────┤
│         Check              │
├───────────┬───────────────┤
│   Close Callbacks          │
└───────────────────────────┘
