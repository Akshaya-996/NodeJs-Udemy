In a client-server communication model, sending responses is how the server provides feedback or data to the client after processing a request. A response typically contains a status code, headers, and optionally a body with the requested data or error information.

1. Anatomy of a Response
A response consists of the following components:

1.1 Status Line
Indicates the HTTP protocol, status code, and status message.
Example:
HTTP/1.1 200 OK

1.2 Headers
Provide metadata about the response, such as content type, caching information, etc.
Example:
Content-Type: application/json
Cache-Control: no-cache

1.3 Body
Contains the actual content being sent to the client (optional).
Example (JSON):
{
  "message": "Data retrieved successfully",
  "data": [1, 2, 3]
}

2. HTTP Response Status Codes
Status codes indicate the result of the request.

2.1 Informational (100–199)
100 Continue: Initial part of the request received; client should continue.
2.2 Success (200–299)
200 OK: The request succeeded.
201 Created: Resource successfully created.
204 No Content: Request succeeded, no body in the response.
2.3 Redirection (300–399)
301 Moved Permanently: Resource moved to a new URL.
302 Found: Temporary redirect.
2.4 Client Error (400–499)
400 Bad Request: Invalid request syntax or parameters.
401 Unauthorized: Authentication is required.
404 Not Found: Resource not found.
2.5 Server Error (500–599)
500 Internal Server Error: General server error.
503 Service Unavailable: Server is unavailable (overloaded or maintenance).


3. Sending Responses in Node.js
In Node.js, the http module allows you to handle and send responses.
Example: Basic Response
const http = require('http');

const server = http.createServer((req, res) => {
  // Set status code and headers
  res.writeHead(200, { 'Content-Type': 'text/plain' });

  // Send the response body
  res.end('Hello, World!');
});

server.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});


In a client-server communication model, sending responses is how the server provides feedback or data to the client after processing a request. A response typically contains a status code, headers, and optionally a body with the requested data or error information.

1. Anatomy of a Response
A response consists of the following components:

1.1 Status Line
Indicates the HTTP protocol, status code, and status message.
Example:
Copy
Edit
HTTP/1.1 200 OK
1.2 Headers
Provide metadata about the response, such as content type, caching information, etc.
Example:
yaml
Copy
Edit
Content-Type: application/json
Cache-Control: no-cache
1.3 Body
Contains the actual content being sent to the client (optional).
Example (JSON):
json
Copy
Edit
{
  "message": "Data retrieved successfully",
  "data": [1, 2, 3]
}
2. HTTP Response Status Codes
Status codes indicate the result of the request.

2.1 Informational (100–199)
100 Continue: Initial part of the request received; client should continue.
2.2 Success (200–299)
200 OK: The request succeeded.
201 Created: Resource successfully created.
204 No Content: Request succeeded, no body in the response.
2.3 Redirection (300–399)
301 Moved Permanently: Resource moved to a new URL.
302 Found: Temporary redirect.
2.4 Client Error (400–499)
400 Bad Request: Invalid request syntax or parameters.
401 Unauthorized: Authentication is required.
404 Not Found: Resource not found.
2.5 Server Error (500–599)
500 Internal Server Error: General server error.
503 Service Unavailable: Server is unavailable (overloaded or maintenance).
3. Sending Responses in Node.js
In Node.js, the http module allows you to handle and send responses.

Example: Basic Response
javascript
Copy
Edit
const http = require('http');

const server = http.createServer((req, res) => {
  // Set status code and headers
  res.writeHead(200, { 'Content-Type': 'text/plain' });

  // Send the response body
  res.end('Hello, World!');
});

server.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});

4. Using Express Framework
Express simplifies the process of sending responses.

4.1 Sending Text
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello, World!'); // Automatically sets content-type
});

app.listen(3000, () => console.log('Server running on http://localhost:3000'));

4.2 Sending JSON
app.get('/data', (req, res) => {
  res.status(200).json({ message: 'Data retrieved successfully', data: [1, 2, 3] });
});

4.3 Setting Headers
app.get('/headers', (req, res) => {
  res.set('Cache-Control', 'no-cache');
  res.send('Headers set!');
});

4.4 Sending Status Codes
app.get('/notfound', (req, res) => {
  res.status(404).send('Resource not found');
});

5. Handling Response Headers
Headers provide important metadata about the response.
Example in Node.js
res.writeHead(200, {
  'Content-Type': 'application/json',
  'Cache-Control': 'no-cache'
});
res.end(JSON.stringify({ message: 'Hello, World!' }));

Example in Express:
app.get('/headers', (req, res) => {
  res.set({
    'Content-Type': 'text/html',
    'X-Custom-Header': 'CustomValue'
  });
  res.send('<h1>Custom Headers Set</h1>');
});


In a client-server communication model, sending responses is how the server provides feedback or data to the client after processing a request. A response typically contains a status code, headers, and optionally a body with the requested data or error information.

1. Anatomy of a Response
A response consists of the following components:

1.1 Status Line
Indicates the HTTP protocol, status code, and status message.
Example:
Copy
Edit
HTTP/1.1 200 OK
1.2 Headers
Provide metadata about the response, such as content type, caching information, etc.
Example:
yaml
Copy
Edit
Content-Type: application/json
Cache-Control: no-cache
1.3 Body
Contains the actual content being sent to the client (optional).
Example (JSON):
json
Copy
Edit
{
  "message": "Data retrieved successfully",
  "data": [1, 2, 3]
}
2. HTTP Response Status Codes
Status codes indicate the result of the request.

2.1 Informational (100–199)
100 Continue: Initial part of the request received; client should continue.
2.2 Success (200–299)
200 OK: The request succeeded.
201 Created: Resource successfully created.
204 No Content: Request succeeded, no body in the response.
2.3 Redirection (300–399)
301 Moved Permanently: Resource moved to a new URL.
302 Found: Temporary redirect.
2.4 Client Error (400–499)
400 Bad Request: Invalid request syntax or parameters.
401 Unauthorized: Authentication is required.
404 Not Found: Resource not found.
2.5 Server Error (500–599)
500 Internal Server Error: General server error.
503 Service Unavailable: Server is unavailable (overloaded or maintenance).
3. Sending Responses in Node.js
In Node.js, the http module allows you to handle and send responses.

Example: Basic Response
javascript
Copy
Edit
const http = require('http');

const server = http.createServer((req, res) => {
  // Set status code and headers
  res.writeHead(200, { 'Content-Type': 'text/plain' });

  // Send the response body
  res.end('Hello, World!');
});

server.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});
4. Using Express Framework
Express simplifies the process of sending responses.

4.1 Sending Text
javascript
Copy
Edit
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello, World!'); // Automatically sets content-type
});

app.listen(3000, () => console.log('Server running on http://localhost:3000'));
4.2 Sending JSON
javascript
Copy
Edit
app.get('/data', (req, res) => {
  res.status(200).json({ message: 'Data retrieved successfully', data: [1, 2, 3] });
});
4.3 Setting Headers
javascript
Copy
Edit
app.get('/headers', (req, res) => {
  res.set('Cache-Control', 'no-cache');
  res.send('Headers set!');
});
4.4 Sending Status Codes
javascript
Copy
Edit
app.get('/notfound', (req, res) => {
  res.status(404).send('Resource not found');
});
5. Handling Response Headers
Headers provide important metadata about the response.

Example in Node.js:
javascript
Copy
Edit
res.writeHead(200, {
  'Content-Type': 'application/json',
  'Cache-Control': 'no-cache'
});
res.end(JSON.stringify({ message: 'Hello, World!' }));
Example in Express:
javascript
Copy
Edit
app.get('/headers', (req, res) => {
  res.set({
    'Content-Type': 'text/html',
    'X-Custom-Header': 'CustomValue'
  });
  res.send('<h1>Custom Headers Set</h1>');
});
6. Sending Files

With Express:
const path = require('path');

app.get('/download', (req, res) => {
  const filePath = path.join(__dirname, 'example.pdf');
  res.download(filePath); // Sends the file as an attachment
});
Streaming Files:
app.get('/stream', (req, res) => {
  const filePath = path.join(__dirname, 'largefile.mp4');
  res.writeHead(200, { 'Content-Type': 'video/mp4' });
  const fileStream = fs.createReadStream(filePath);
  fileStream.pipe(res); // Streams file to the client
});

7. Middleware in Response Processing
Middleware can modify the response before it is sent.

Example:
app.use((req, res, next) => {
  res.set('X-Powered-By', 'Node.js');
  next();
});

8. Redirecting Responses
Redirects inform the client that the resource is at a new URL.

Temporary Redirect (302)
app.get('/old', (req, res) => {
  res.redirect('/new');
});
Permanent Redirect (301)
app.get('/old', (req, res) => {
  res.redirect(301, '/new');
});

9. Caching Responses
Caching can improve performance by reducing server load.

Setting Cache Headers:
app.get('/data', (req, res) => {
  res.set('Cache-Control', 'public, max-age=3600');
  res.json({ message: 'Cached data' });
});

10. Error Handling in Responses
Always handle errors gracefully.

Example:

app.get('/error', (req, res) => {
  try {
    // Simulate an error
    throw new Error('Something went wrong');
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});




